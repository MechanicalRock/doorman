service: mr-virtual-concierge

custom:
  pythonRequirements:
    dockerizePip: true
  environment: ${file(env.yml):dev}

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "rekognition:DetectFaces"
        - "rekognition:SearchFacesByImage"
        - "rekognition:IndexFaces"
      Resource: "*"
    - Effect: "Allow"
      Action:
       - "s3:PutObject"
       - "s3:PutObjectAcl"
       - "s3:GetObject"
       - "s3:DeleteObject"
      Resource:
        - "arn:aws:s3:::${self:custom.environment.BUCKET_NAME}/*"
  environment:
    BUCKET_NAME: ${self:custom.environment.BUCKET_NAME}
    SLACK_API_TOKEN: ${self:custom.environment.SLACK_API_TOKEN}
    SLACK_CHANNEL_ID: ${self:custom.environment.SLACK_CHANNEL_ID}
    REKOGNITION_COLLECTION_ID: ${self:custom.environment.REKOGNITION_COLLECTION_ID}

functions:
  guess:
    handler: handler.guess
    events:
      - s3:
          bucket: ${self:custom.environment.BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: incoming/
  unknown:
    handler: handler.unknown
    events:
      - s3:
          bucket: ${self:custom.environment.BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: unknown/
  train:
    handler: handler.train
    events:
      - http:
          path: faces/train
          method: post
  decode:
    handler: handler.decode
    events:
      - iot:
          sql: SELECT *, FROM '${self:custom.environment.IOT_TOPIC}'

plugins:
  - serverless-python-requirements
